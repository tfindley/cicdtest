name: 'Test CICD Pipeline'

# **What it does**: Renders the content of every page and check all internal links.
# **Why we have it**: To make sure all links connect correctly.
# **Who does it impact**: Docs content.

on:
  workflow_dispatch:
  push:
    branches:
      - main

permissions:
  contents: read
  # Needed for the 'trilom/file-changes-action' action
  pull-requests: read

# This allows a subsequently queued workflow run to interrupt previous runs
concurrency:
  group: '${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'
  cancel-in-progress: true

jobs:
  build_venv:
    runs-on: ${{ fromJSON('["self-hosted"]')[github.repository == 'github/docs-internal'] }}
    steps:

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup python venv
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          FILE=requirements.txt
          if [ -f "$FILE" ]; then
            echo "$FILE exists."
            pip install -r requirements.txt
          else
            echo "$FILE does not exist."
          fi


      # - name: Add requirements to venv venv
      #   run: |
      #     if [ -d "../.venv" ]; then
      #       rm -rf ../.venv
      #     else
      #       echo "No venv detected"
      #     fi
      # - name: Checkout
      #   uses: actions/checkout@v3

      # - name: Create python venv
      #   run: |
      #     python3 -m venv ../.venv
      #     . ../.venv/bin/activate
      #     pip install --upgrade pip

      # - name: Add requirements to venv venv
      #   run: |
      #     . ../.venv/bin/activate
      #     FILE=requirements.txt
      #     if [ -f "$FILE" ]; then
      #       echo "$FILE exists."
      #       pip install -r requirements.txt
      #     else
      #       echo "$FILE does not exist."
      #     fi

  linting:
    needs: build_venv
    runs-on: ${{ fromJSON('["self-hosted"]')[github.repository == 'github/docs-internal'] }}
    steps:
      - name: debug
        run: |
          pwd
          ls -lah
          ls -lah ../

      - name: Use python venv
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'


      - name: Activate venv then lint all code using flake8
        run: |
          flake8 .

  fixing:
    needs: linting
    if: ${{ failure() }}
    runs-on: ${{ fromJSON('["self-hosted"]')[github.repository == 'github/docs-internal'] }}
    steps:

      - name: Use python venv
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: fix content
        run: |
          autopep8 -aa -i -r .
          flake8 .

  commit:
    needs: fixing
    runs-on: ${{ fromJSON('["self-hosted"]')[github.repository == 'github/docs-internal'] }}
    steps:
      - name: Recommit
        uses: EndBug/add-and-commit@v9 # You can change this to use a specific version.
        with:
          # The arguments for the `git add` command (see the paragraph below for more info)
          # Default: '.'
          # add: 'src'

          # The name of the user that will be displayed as the author of the commit.
          # Default: depends on the default_author input
          # author_name: AutoPep8

          # The email of the user that will be displayed as the author of the commit.
          # Default: depends on the default_author input
          # author_email: tfindley@outlook.com

          # Additional arguments for the git commit command. The --message argument is already set by the message input.
          # Default: ''
          commit: --signoff

          # The name of the custom committer you want to use, if different from the author of the commit.
          # Default: the name of the author (set with either author_name or default_author)
          # committer_name: Auto Pep8

          # The email of the custom committer you want to use, if different from the author of the commit.
          # Default: the email of the author (set with either author_email or default_author)
          # committer_email: tfindley@outlook.com

          # The local path to the directory where your repository is located. You should use actions/checkout first to set it up.
          # Default: '.'
          # cwd: './path/to/the/repo'

          # Determines the way the action fills missing author name and email. Three options are available:
          # - github_actor -> UserName <UserName@users.noreply.github.com>
          # - user_info -> Your Display Name <your-actual@email.com>
          # - github_actions -> github-actions <email associated with the github logo>
          # Default: github_actor
          # default_author: github_actor

          # Arguments for the git fetch command. If set to false, the action won't fetch the repo.
          # For more info as to why fetching is usually recommended, please see the "Performance on large repos" FAQ. 
          # Default: --tags --force
          # fetch: false

          # The message for the commit.
          # Default: 'Commit from GitHub Actions (name of the workflow)'
          message: 'fix: Linting fixes'

          # If this input is set, the action will push the commit to a new branch with this name.
          # Default: ''
          new_branch: autopep8

          # The way the action should handle pathspec errors from the add and remove commands. Three options are available:
          # - ignore -> errors will be logged but the step won't fail
          # - exitImmediately -> the action will stop right away, and the step will fail
          # - exitAtEnd -> the action will go on, every pathspec error will be logged at the end, the step will fail.
          # Default: ignore
          pathspec_error_handling: ignore

          # Arguments for the git pull command. By default, the action does not pull.
          # Default: ''
          # pull: '--rebase --autostash ...'

          # Whether to push the commit and, if any, its tags to the repo. It can also be used to set the git push arguments (see the paragraph below for more info)
          # Default: true
          push: true

          # The arguments for the `git rm` command (see the paragraph below for more info)
          # Default: ''
          # remove: './dir/old_file.js'

          # Arguments for the git tag command (the tag name always needs to be the first word not preceded by an hyphen)
          # Default: ''
          # tag: 'v1.0.0 --force'

          # Arguments for the git push --tags command (any additional argument will be added after --tags)
          # Default: ''
          # tag_push: '--force'


  test:
    needs: [linting]
    runs-on: ${{ fromJSON('["self-hosted"]')[github.repository == 'github/docs-internal'] }}

    steps:
    - name: Use python venv
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
  
    - name: Run Tests
      run: |
        python manage.py test

  deploy:
    needs: [test]

    runs-on: ${{ fromJSON('["self-hosted"]')[github.repository == 'github/docs-internal'] }}

    steps:
    - name: Checkout source code
      uses: actions/checkout@v2

    - name: Generate deployment package
      run: zip -r deploy.zip . -x '*.git*'

    - name: Deploy to EB
      uses: einaregilsson/beanstalk-deploy@v20
      with:
        aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        application_name: django-github-actions0-aws
        environment_name: Djangogithubactions0aws-env
        version_label: 12349
        region: "us-east-1"
        deployment_package: deploy.zip

  # cleanup:
  #   needs: linting
  #   if: always()
  #   runs-on: ${{ fromJSON('["self-hosted"]')[github.repository == 'github/docs-internal'] }}
  #   steps:
    
  #     - name: Destroy venv
  #       run: |
  #         if [ -d "../.venv" ]; then
  #           rm -rf ../.venv
  #         else
  #           echo "No venv detected"
  #         fi